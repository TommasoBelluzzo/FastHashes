name: Package Publishing

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target:'
        required: true
        default: 'MINOR'

jobs:
  task:
    name: Task
    runs-on: ubuntu-latest
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: .NET Setup
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Version Bump
      id: bump
      env:
        TARGET: ${{ github.event.inputs.target }}
        VERSION_REGEX: Version>\d+\.\d+\.\d+
      run: |
        TARGET="${TARGET^^}"
        if [[ "$TARGET" != "MAJOR" ]] && [[ "$TARGET" != "MINOR" ]] && [[ "$TARGET" != "BUILD" ]]; then
          echo "INVALID INPUT"
          exit 1
        fi
        ls -ld $(find .)
        exit 1
        FILES=()
        while IFS= read -r FILE; do
          FILES+=("$FILE")
          if [[ "$FILE" =~ ^.+FastHashes\.csproj$ ]]; then
            grep -P "<$VERSION_REGEX" $FILE
            VERSION=$(grep -P "<$VERSION_REGEX" $FILE | cut -d ">" -f2)
            VERSION_MAJOR=$(echo "$VERSION" | cut -d "." -f1)
            VERSION_MINOR=$(echo "$VERSION" | cut -d "." -f2)
            VERSION_BUILD=$(echo "$VERSION" | cut -d "." -f3)
          fi
        done < <(find . -type f -name "*.csproj")
        if [[ "${#FILES[@]}" -eq 0 ]]; then
          echo "NO PROJECT FILES FOUND"
          exit 1
        fi
        if [[ -z "${VERSION+x}" ]]; then
          echo "VERSION NOT FOUND"
          exit 1
        fi
        if [[ "$TARGET" == "MAJOR" ]]; then
          VERSION_MAJOR=$(($VERSION_MAJOR+1))
          VERSION_MINOR=0
          VERSION_BUILD=0
        elif [[ "$TARGET" == "MINOR" ]]; then
          VERSION_MINOR=$(($VERSION_MINOR+1))
          VERSION_BUILD=0
        else
          VERSION_BUILD=$(($VERSION_BUILD+1))
        fi
        VERSION=$(printf "%d.%d.%d" $VERSION_MAJOR $VERSION_MINOR $VERSION_BUILD 2>/dev/null)
        ASSEMBLY_VERSION=$(printf "%d.0.0" $VERSION_MAJOR 2>/dev/null)
        for FILE in "${FILES[@]}"; do
          PATTERN=$(grep -Poh "<$VERSION_REGEX" "$FILE")
          sed -i "s/$PATTERN/<Version>$VERSION/g" "$FILE"
          grep -P "<$VERSION_REGEX" "$FILE"
          PATTERN=$(grep -Poh "<File$VERSION_REGEX" "$FILE")
          sed -i "s/$PATTERN/<FileVersion>$VERSION/g" "$FILE"
          grep -P "<File$VERSION_REGEX" "$FILE"
          if [[ "$TARGET" == "MAJOR" ]]; then
            PATTERN=$(grep -Poh "<Assembly$VERSION_REGEX" "$FILE")
            sed -i "s/$PATTERN/<AssemblyVersion>$ASSEMBLY_VERSION/g" "$FILE"
            grep -P "<Assembly$VERSION_REGEX" "$FILE"
          fi
        done
        echo "::set-output name=version::$VERSION"
    - name: Restore
      working-directory: Solution/
      run: dotnet restore --force-evaluate
    - name: Build
      working-directory: Solution/
      run: dotnet build FastHashes/FastHashes.csproj --configuration Release --no-restore --no-incremental --verbosity normal
    - name: Pack
      working-directory: Solution/
      run: dotnet pack FastHashes/FastHashes.csproj --output ../Package/ --configuration Release --no-restore --no-build --include-symbols --verbosity normal
    - name: Publish
      env:
        VERSION: ${{ steps.bump.outputs.version }}
      working-directory: Solution/
      run: dotnet nuget push Package/FastHashes.${VERSION}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_TOKEN }}
    - name: Version Commit
      env:
        VERSION: ${{ steps.bump.outputs.version }}
      run: |
        git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
        git config --local user.name "${{ secrets.BOT_USERNAME }}"
        git config --local user.email "${{ secrets.BOT_EMAIL }}"
        git add --a
        git commit -m "Release $VERSION"  
        git push
