name: Package Publishing

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target:'
        required: true
        default: 'MINOR'

jobs:
  publishing:
    name: Publishing
    runs-on: ubuntu-latest
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: .NET Setup
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Version Bump
      id: bump
      env:
        TARGET: ${{ github.event.inputs.target }}
        VERSION_REGEX1: <Version>\d+\.\d+\.\d+<\/Version>
        VERSION_REGEX2: <AssemblyVersion>\d+\.\d+\.\d+\.\d+<\/AssemblyVersion>
        VERSION_REGEX3: <FileVersion>\d+\.\d+\.\d+\.\d+<\/FileVersion>
      run: |
        TARGET=${TARGET^^}
        if [[ $TARGET != 'MAJOR' ]] && [[ $TARGET != 'MINOR' ]] && [[ $TARGET != 'BUILD' ]] && [[ $TARGET != 'NONE' ]]; then
          echo 'INVALID INPUT'
          exit 1
        fi
        FILES=()
        while IFS= read -r FILE; do
          FILES+=($FILE)
          if [[ $FILE =~ ^.+FastHashes\.csproj$ ]]; then
            grep -P $VERSION_REGEX1 $FILE
            VERSION=$(grep -P $VERSION_REGEX1 $FILE | awk '{ gsub(/<[^>]*>/,""); print }')
            VERSION_MAJOR=$(echo $VERSION | cut -d '.' -f1)
            VERSION_MINOR=$(echo $VERSION | cut -d '.' -f2)
            VERSION_BUILD=$(echo $VERSION | cut -d '.' -f3)
          fi
        done < <(find . -type f -name '*.csproj')
        if [[ ${#FILES[@]} -eq 0 ]]; then
          echo 'NO PROJECT FILES FOUND'
          exit 1
        fi
        if [[ -z ${VERSION+x} ]]; then
          echo 'VERSION NOT FOUND'
          exit 1
        fi
        echo $VERSION
        echo $VERSION_MINOR
        echo $VERSION_BUILD
        echo $VERSION_BUILD
        if [[ $TARGET == 'MAJOR' ]]; then
          VERSION_MAJOR=$(($VERSION_MAJOR + 1))
          VERSION_MINOR=0
          VERSION_BUILD=0
        elif [[ $TARGET == 'MINOR' ]]; then
          VERSION_MINOR=$(($VERSION_MINOR + 1))
          VERSION_BUILD=0
        elif [[ $TARGET == 'BUILD' ]]; then
          VERSION_BUILD=$(($VERSION_BUILD + 1))
        fi
        VERSION=$(printf '%d.%d.%d' $VERSION_MAJOR $VERSION_MINOR $VERSION_BUILD 2>/dev/null)
        echo $VERSION
        echo $VERSION_MINOR
        echo $VERSION_BUILD
        echo $VERSION_BUILD
        for FILE in ${FILES[@]}; do
          sed -i 's/$VERSION_REGEX1/<Version>$VERSION<\/Version>/g' $FILE
          grep -P $VERSION_REGEX1 $FILE
          sed -i 's/$VERSION_REGEX2/<AssemblyVersion>$VERSION\.0<\/AssemblyVersion>/g' $FILE
          grep -P $VERSION_REGEX2 $FILE
          sed -i 's/$VERSION_REGEX3/<FileVersion>$VERSION\.0<\/FileVersion>/g' $FILE
          grep -P $VERSION_REGEX3 $FILE
        done
        echo "::set-output name=version::$VERSION"
    - name: Restore
      working-directory: Solution/
      run: dotnet restore --force-evaluate
    - name: Build
      working-directory: Solution/
      run: dotnet build FastHashes.sln --configuration Release --no-restore --no-incremental --verbosity normal
